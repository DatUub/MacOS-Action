import { resolveIGuilds } from "../../index.js";
import { Method } from "./Method.js";
/**
 * @category Decorator
 */
export class DReaction extends Method {
    _emoji;
    _description;
    _directMessage;
    _guilds;
    _botIds;
    _aliases;
    _remove;
    _partial;
    get aliases() {
        return this._aliases;
    }
    set aliases(value) {
        this._aliases = value;
    }
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    get directMessage() {
        return this._directMessage;
    }
    set directMessage(value) {
        this._directMessage = value;
    }
    get emoji() {
        return this._emoji;
    }
    set emoji(value) {
        this._emoji = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get remove() {
        return this._remove;
    }
    set remove(value) {
        this._remove = value;
    }
    get partial() {
        return this._partial;
    }
    set partial(value) {
        this._partial = value;
    }
    constructor(data) {
        super();
        this._emoji = data.emoji;
        this._description = data.description ?? this.emoji;
        this._directMessage = data.directMessage ?? true;
        this._guilds = data.guilds ?? [];
        this._botIds = data.botIds ?? [];
        this._aliases = data.aliases ?? [];
        this._remove = data.remove ?? false;
        this._partial = data.partial ?? false;
    }
    static create(data) {
        return new DReaction(data);
    }
    isBotAllowed(botId) {
        if (!this.botIds.length) {
            return true;
        }
        return this.botIds.includes(botId);
    }
    async getGuilds(client) {
        const guilds = await resolveIGuilds(client, this, [
            ...client.botGuilds,
            ...this.guilds,
        ]);
        return guilds;
    }
    async isGuildAllowed(client, guildId) {
        if (!guildId) {
            return true;
        }
        const guilds = await this.getGuilds(client);
        if (!guilds.length) {
            return true;
        }
        return guilds.includes(guildId);
    }
    parseParams() {
        return [];
    }
}
//# sourceMappingURL=DReaction.js.map