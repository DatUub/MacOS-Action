import { ApplicationCommandOptionType } from "discord.js";
import { DApplicationCommandOption, resolveIGuilds } from "../../index.js";
import { Method } from "./Method.js";
/**
 * @category Decorator
 */
export class DApplicationCommand extends Method {
    _botIds;
    _name;
    _nameLocalizations;
    _description;
    _descriptionLocalizations;
    _defaultMemberPermissions;
    _dmPermission;
    _guilds;
    _group;
    _options = [];
    _subgroup;
    _type;
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get defaultMemberPermissions() {
        return this._defaultMemberPermissions;
    }
    set defaultMemberPermissions(value) {
        this._defaultMemberPermissions = value;
    }
    get dmPermission() {
        return this._dmPermission;
    }
    set dmPermission(value) {
        this._dmPermission = value;
    }
    get descriptionLocalizations() {
        return this._descriptionLocalizations;
    }
    set descriptionLocalizations(value) {
        this._descriptionLocalizations = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get nameLocalizations() {
        return this._nameLocalizations;
    }
    set nameLocalizations(value) {
        this._nameLocalizations = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    get subgroup() {
        return this._subgroup;
    }
    set subgroup(value) {
        this._subgroup = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    constructor(data) {
        super();
        this._name = data.name;
        this._type = data.type;
        this._description = data.description;
        this._guilds = data.guilds ?? [];
        this._botIds = data.botIds ?? [];
        this._descriptionLocalizations = data.descriptionLocalizations ?? null;
        this._nameLocalizations = data.nameLocalizations ?? null;
        this._dmPermission = data.dmPermission ?? true;
        this._defaultMemberPermissions = data.defaultMemberPermissions ?? null;
    }
    static create(data) {
        return new DApplicationCommand(data);
    }
    isBotAllowed(botId) {
        if (!this.botIds.length) {
            return true;
        }
        return this.botIds.includes(botId);
    }
    async getGuilds(client) {
        const guilds = await resolveIGuilds(client, this, [
            ...client.botGuilds,
            ...this.guilds,
        ]);
        return guilds;
    }
    async isGuildAllowed(client, guildId) {
        if (!guildId) {
            return true;
        }
        const guilds = await this.getGuilds(client);
        if (!guilds.length) {
            return true;
        }
        return guilds.includes(guildId);
    }
    toSubCommand() {
        const option = DApplicationCommandOption.create({
            description: this.description,
            descriptionLocalizations: this.descriptionLocalizations,
            name: this.name,
            nameLocalizations: this.nameLocalizations,
            type: ApplicationCommandOptionType.Subcommand,
        }).decorate(this.classRef, this.key, this.method, this.from, this.index);
        option.options = this.options;
        return option;
    }
    toJSON() {
        const options = [...this.options]
            .reverse()
            .sort((a, b) => {
            if ((a.type === ApplicationCommandOptionType.Subcommand ||
                a.type === ApplicationCommandOptionType.SubcommandGroup) &&
                (b.type === ApplicationCommandOptionType.Subcommand ||
                    b.type === ApplicationCommandOptionType.SubcommandGroup)) {
                return a.name < b.name ? -1 : 1;
            }
            return 0;
        })
            .map((option) => option.toJSON());
        const data = {
            defaultMemberPermissions: this.defaultMemberPermissions,
            description: this.description,
            descriptionLocalizations: this.descriptionLocalizations,
            dmPermission: this.dmPermission,
            name: this.name,
            nameLocalizations: this.nameLocalizations,
            options: options,
            type: this.type,
        };
        return data;
    }
    parseParams(interaction) {
        return Promise.all([...this.options].reverse().map((op) => op.parse(interaction)));
    }
}
//# sourceMappingURL=DApplicationCommand.js.map