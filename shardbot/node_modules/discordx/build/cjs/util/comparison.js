"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isApplicationCommandEqual = exports.RecursivelyMatchField = void 0;
const tslib_1 = require("tslib");
const isEqual_js_1 = tslib_1.__importDefault(require("lodash/isEqual.js"));
const omit_js_1 = tslib_1.__importDefault(require("lodash/omit.js"));
/**
 * Transform bigint to string
 * @param obj - object
 * @returns
 */
function jsonToString(obj) {
    return JSON.stringify(obj, (key, value) => typeof value === "bigint" ? value.toString() : value);
}
/**
 * Recursively match field
 *
 * @param object
 * @param keys
 * @param onMatch
 */
function RecursivelyMatchField(object, keys, onMatch) {
    Object.keys(object).some(function (k) {
        if (keys.includes(k)) {
            onMatch(object, k);
        }
        if (object[k] && typeof object[k] === "object") {
            RecursivelyMatchField(object[k], keys, onMatch);
        }
    });
}
exports.RecursivelyMatchField = RecursivelyMatchField;
/**
 * Check if ApplicationCommand and DApplicationCommand has same properties
 *
 * @param findCommand
 * @param DCommand
 * @param isGuild
 * @returns
 */
function isApplicationCommandEqual(findCommand, DCommand, isGuild) {
    const commandJson = findCommand.toJSON();
    const rawData = DCommand.toJSON();
    // replace undefined fields with null
    RecursivelyMatchField(commandJson, ["descriptionLocalizations", "nameLocalizations"], (object, key) => {
        if (object[key] === undefined) {
            object[key] = null;
        }
    });
    // replace null fields with undefined
    RecursivelyMatchField(commandJson, ["descriptionLocalized", "nameLocalized", "dmPermission"], (object, key) => {
        if (object[key] === null) {
            object[key] = undefined;
        }
    });
    // remove unwanted fields
    if (isGuild) {
        RecursivelyMatchField(rawData, ["dmPermission"], (object, key) => {
            object[key] = undefined;
        });
    }
    const firstJson = JSON.parse(jsonToString((0, omit_js_1.default)(commandJson, "id", "applicationId", "guild", "guildId", "version", "descriptionLocalized", "nameLocalized", "permissions", "defaultPermission")));
    const secondJson = JSON.parse(jsonToString(rawData));
    const response = (0, isEqual_js_1.default)(firstJson, secondJson);
    return response;
}
exports.isApplicationCommandEqual = isApplicationCommandEqual;
//# sourceMappingURL=comparison.js.map