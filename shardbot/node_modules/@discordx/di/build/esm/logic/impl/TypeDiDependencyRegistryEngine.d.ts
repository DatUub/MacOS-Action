import type { Container, Service } from "typedi";
import { Token } from "typedi";
import type { InstanceOf } from "../../index.js";
import { AbstractConfigurableDependencyInjector } from "../AbstractConfigurableDependencyInjector.js";
export declare class TypeDiDependencyRegistryEngine extends AbstractConfigurableDependencyInjector<typeof Container> {
    static readonly token: Token<unknown>;
    private static _instance;
    private service;
    static get instance(): TypeDiDependencyRegistryEngine;
    addService<T>(classType: T): void;
    setService(service: typeof Service): this;
    getAllServices(): Set<unknown>;
    getService<T>(classType: T): InstanceOf<T> | null;
}
