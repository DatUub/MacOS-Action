import { Token } from "typedi";
import { AbstractConfigurableDependencyInjector } from "../AbstractConfigurableDependencyInjector.js";
export class TypeDiDependencyRegistryEngine extends AbstractConfigurableDependencyInjector {
    static token = new Token("discordx");
    static _instance;
    service;
    static get instance() {
        if (!TypeDiDependencyRegistryEngine._instance) {
            TypeDiDependencyRegistryEngine._instance =
                new TypeDiDependencyRegistryEngine();
        }
        return TypeDiDependencyRegistryEngine._instance;
    }
    addService(classType) {
        const clazz = classType;
        if (!this.service) {
            throw new Error("Please set the Service!");
        }
        this._serviceSet.add(classType);
        if (this.useToken) {
            this.service({
                id: TypeDiDependencyRegistryEngine.token,
                multiple: true,
            })(clazz);
        }
        else {
            this.service()(clazz);
        }
    }
    setService(service) {
        this.service = service;
        return this;
    }
    getAllServices() {
        if (!this.injector) {
            throw new Error("Please set the Service!");
        }
        if (this.useToken) {
            return new Set(this.injector.getMany(TypeDiDependencyRegistryEngine.token));
        }
        const retSet = new Set();
        for (const classRef of this._serviceSet) {
            retSet.add(this.injector.get(classRef));
        }
        return retSet;
    }
    getService(classType) {
        if (!this.injector) {
            throw new Error("Please set the Service!");
        }
        if (this.useToken) {
            return (this.injector
                .getMany(TypeDiDependencyRegistryEngine.token)
                .find((clazz) => clazz
                .constructor === classType) ?? null);
        }
        return this.injector.get(classType);
    }
}
//# sourceMappingURL=TypeDiDependencyRegistryEngine.js.map